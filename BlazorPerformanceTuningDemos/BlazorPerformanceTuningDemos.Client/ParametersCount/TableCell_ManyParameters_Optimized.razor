<td>@ChildContent</td>

@code {
	[Parameter] public string Parameter1 { get; set; }
	[Parameter] public string Parameter2 { get; set; }
	[Parameter] public string Parameter3 { get; set; }
	[Parameter] public string Parameter4 { get; set; }
	[Parameter] public string Parameter5 { get; set; }
	[Parameter] public string Parameter6 { get; set; }
	[Parameter] public string Parameter7 { get; set; }
	[Parameter] public string Parameter8 { get; set; }
	[Parameter] public string Parameter9 { get; set; }
	[Parameter] public string Parameter10 { get; set; }

	[Parameter] public RenderFragment ChildContent { get; set; } // prevents the diff to optimize the rendering

	public override Task SetParametersAsync(ParameterView parameters)
	{
		foreach (var parameter in parameters)
		{
			switch (parameter.Name)
			{
				case nameof(Parameter1):
					Parameter1 = (string)parameter.Value;
					break;
				case nameof(Parameter2):
					Parameter2 = (string)parameter.Value;
					break;
				case nameof(Parameter3):
					Parameter3 = (string)parameter.Value;
					break;
				case nameof(Parameter4):
					Parameter4 = (string)parameter.Value;
					break;
				case nameof(Parameter5):
					Parameter5 = (string)parameter.Value;
					break;
				case nameof(Parameter6):
					Parameter6 = (string)parameter.Value;
					break;
				case nameof(Parameter7):
					Parameter7 = (string)parameter.Value;
					break;
				case nameof(Parameter8):
					Parameter8 = (string)parameter.Value;
					break;
				case nameof(Parameter9):
					Parameter9 = (string)parameter.Value;
					break;
				case nameof(Parameter10):
					Parameter10 = (string)parameter.Value;
					break;
				case nameof(ChildContent):
					ChildContent = (RenderFragment)parameter.Value;
					break;
				default:
					throw new ArgumentException($"Unknown parameter: {parameter.Name}");
			}
		}

		return base.SetParametersAsync(ParameterView.Empty);
	}
}
