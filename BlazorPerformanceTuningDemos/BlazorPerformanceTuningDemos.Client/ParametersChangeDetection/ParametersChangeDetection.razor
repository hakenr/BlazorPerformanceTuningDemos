@page "/parameters-change-detection"
@inject IDemoDataService DemoDataService

<HxListLayout Title="Parameters Change Detection"
			  TFilterModel="EmployeesFilterDto"
			  @bind-FilterModel="filterModel"
			  @bind-FilterModel:after="gridComponent.RefreshDataAsync">
	<FilterTemplate Context="filterContext">
		<HxInputText Label="Name" @bind-Value="filterContext.Name" />
		<HxInputText Label="Phone" @bind-Value="filterContext.Phone" />
		<HxInputNumber Label="Minimum salary" @bind-Value="filterContext.SalaryMin" Decimals="0" InputGroupStartText="$" />
		<HxInputNumber Label="Maximum salary" @bind-Value="filterContext.SalaryMax" Decimals="0" InputGroupStartText="$" />
		<HxInputText Label="Position" @bind-Value="filterContext.Position" />
		<HxInputText Label="Location" @bind-Value="filterContext.Location" />
	</FilterTemplate>
	<DataTemplate>
		<HxGrid @ref="gridComponent"
				TItem="EmployeeDto"
				DataProvider="GetGridData"
				@bind-SelectedDataItem="currentEmployee"
				PageSize="5"
				Responsive="true">
			<Columns>
				<HxGridColumn HeaderText="Name" ItemTextSelector="employee => employee.Name" />
				<HxGridColumn HeaderText="Phone" ItemTextSelector="employee => employee.Phone" />
				<HxGridColumn HeaderText="Salary" ItemTextSelector="@(employee => employee.Salary.ToString("c0"))" />
				<HxGridColumn HeaderText="Position" ItemTextSelector="employee => employee.Position" />
				<HxGridColumn HeaderText="Location" ItemTextSelector="employee => employee.Location" />
			</Columns>
		</HxGrid>
	</DataTemplate>
</HxListLayout>

@if (currentEmployee != null)
{
	<EmployeeDetail EmployeeId="@currentEmployee.Id" />
}

@code {
	private EmployeeDto currentEmployee;
	private EmployeesFilterDto filterModel = new() { SalaryMax = 20000 };
	private HxGrid<EmployeeDto> gridComponent;

	private async Task<GridDataProviderResult<EmployeeDto>> GetGridData(GridDataProviderRequest<EmployeeDto> request)
	{
		return new GridDataProviderResult<EmployeeDto>()
			{
				Data = await DemoDataService.GetEmployeesDataFragmentAsync(filterModel, request.StartIndex, request.Count, request.CancellationToken),
				TotalCount = await DemoDataService.GetEmployeesCountAsync(filterModel, request.CancellationToken)
			};
	}
}

@*
	OK: primitive immutable types (string, int, bool, DateTime, Guid, Type, decimal, ...)
	BAD: RenderFragment, class/record!
	OK starting .NET9: EventCallback, EventCallback<T>, ...!
		https://github.com/dotnet/aspnetcore/commit/998c6c64bc58e818b85211f63df9d248579d4662
*@
