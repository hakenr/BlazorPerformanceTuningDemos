@page "/too-many-events-debounced"
@inject IDemoDataService DemoDataService
@implements IDisposable

<h3>Too Many Events</h3>

<HxInputText @bind-Value="_searchTerm"
			 @bind-Value:after="HandleSearchTermChanged"
			 BindEvent="BindEvent.OnInput"
			 Placeholder="Search" />

<HxProgressIndicator InProgress="_inProgress" Delay="0">
	<ul class="pt-3">
		@foreach (var employee in _employeesFound)
		{
			<li>@employee.Name</li>
		}
	</ul>
</HxProgressIndicator>

@code {
	private string _searchTerm;
	private bool _inProgress;
	private IEnumerable<EmployeeDto> _employeesFound = [];
	private Debouncer _queryDebouncer = new Debouncer();

	private async Task HandleSearchTermChanged()
	{
		await _queryDebouncer.DebounceAsync(millisecondsDelay: 500, actionAsync: async (cancellationToken) =>
		{
			_inProgress = true;
			_employeesFound = await DemoDataService.FindEmployeesByNameAsync(_searchTerm, limitCount: 10, cancellationToken);
			_inProgress = false;
		});
	}

	public void Dispose()
	{
		_queryDebouncer.Dispose();
	}

	// TODO Minimal search term length
}